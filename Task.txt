[独自ドメイン設定作業]

1.
[お名前.comにネームサーバ名を追加]
ns1.vultr.com
ns2.vultr.com

2.
[vultr]
vultrにログインしてコントロールパネルよりDNSという場所を選択しドメインを追加


(参考)
[vultrのドメイン設定方法]
https://asamesimae.com/vultr_set_domain/

[Vultr DNSの概要]
https://cloudo3.com/ja/%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%88%E3%82%99%E3%82%B3%E3%83%B3%E3%83%92%E3%82%9A%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%AF%E3%82%99/vultr-dns%E3%81%AE%E6%A6%82%E8%A6%81/2202

---------------------

[質問]
URLの設定について

デプロイ周りの知識が皆無で頓珍漢な質問をしてしまい恐れ入ります。
コースのデプロイ方法ですと、IPアドレスでしかアクセスできないかと思いますが、
我々が普段使っているようなURLでアクセスできるようにするにはどうしたら良いのでしょうか

ドメインドットコム等でドメインを購入したら、外部サーバーなどで結び付けをすると使えるようになるのでしょうか

  ---------------------
[解答]
DNSのCNAMEレコードの設定をすることでドメインでのアクセスが可能となるかと思います。

------------------------------------------------------------------------------
# 独自ドメインでやる方法


＜ローカル側での作業＞

変更点①

{‌{ ローカルのディレクトリ }}/todoproject/todo/urls.py
の

urlpatterns = [

path('list/', TodoList.as_view(), name='list'),
を

urlpatterns = [

    path('', TodoList.as_view(), name='list'),

へと変更



＜サーバへgit cloneした後のサーバ側での作業＞

変更点②

手順の「4-1. settings.pyファイルの設定」内の

vim ~/todoproject/todoproject/settings.pyで

ALLOWED_HOSTS = ['VPSのIP', ‘localhost’’]
を

ALLOWED_HOSTS = ['VPSのIP', 'VPSのIPと紐付けたドメイン名', ‘localhost’’]
へと変更


変更点③

手順の「6-1. Nginxの繋ぎこみの設定」内の

sudo vim /etc/nginx/sites-available/todoprojectで

server_name VPSのIP;
を

server_name VPSのIPと紐付けたドメイン名 VPSのIP;
へと変更


（修正後の反映は、gunicormも併せ再起動すると変更が反映されるようになるかな、と思います。）

(参考)
https://www.udemy.com/course/django-3app/learn/lecture/14236576#questions/7577474
------------------------------------------------------------------------------
2(todoアプリでデータをアーカイブとして残す方法)

todoアプリで削除を押すと完全に消去されていると思いますが
過去のtodoを見返すため、削除したtodoをアーカイブとして別のリストに表示させる機能が欲しいのですが、
リスト表示の際にフィルタをして必要なものだけ表示させるようなことはできるのでしょうか。

[参考サイト]
https://docs.djangoproject.com/ja/3.0/topics/db/queries/
------------------------------------------------------------------------------
3

DjangoはInstagramで使用されているようなのですが、
Instagramのような何万人と利用するアプリもコースで作成した社内SNSの構成で作成可能なのでしょうか。
それとも大規模だと何か他に考慮するべきことがあるのでしょうか。

基本的には講義の内容通りでアプリを作成すること可能ですが、セキュリティ面の設定やユーザーモデルの拡張、検索機能の導入やメールサーバーの導入など、細かい点を踏まえると本当に使えるサイトを作るという観点ではまだ沢山のステップを踏まなければいけないかと思います。
---------------------
4

個人的なおススメとしては、少し難易度が上がってしまうのですが、日本語の字幕があるUdemyの講座を受講するのが良いかと思います。

日本語字幕は自動翻訳なのですこし雑な内容になってしまいますが、理解を深めるのに役立つのではないかと思います。

英語字幕でも頑張れるのであれば、Justin Michelさんが作成されたDjango Coreという講座や、実際にマッチングサイトなどを作っている講座がおススメです（英語ですが、githubにソースコードが上がっているので、その中身を見ても勉強になるかと思います）。
---------------------
5

TodoアプリのレッスンでやったUpdateViewを、社内SNSアプリの機能に追加したのですが、ユーザー別での処理について質問させてください。
例えば、Aさん、Bさんがユーザーとして存在していて、それぞれ投稿をしています。

下記のように、{% if user.is_authenticated %}を使ってログイン状態のユーザーが処理を行えるようにしたのですが、Aさん（ログインしているユーザー）は自分の投稿も編集できますが、Bさんの編集もできていまします。（動画で行った< form >を少し変えてみましたが、こちらでも投稿は編集自体はできています）

Bさんの編集処理を制限したいのですが、処理が上手くできませんでした。
AさんがBさんの投稿編集をできないようにするにはどのような処理を行えば良いですか？

```html:update.html

{% if user.is_authenticated %}

      <form method="POST"　enctype="multipart/form-data">{% csrf_token %}

        <div>Title:{‌{ form.title }}</div>

        <div>Memo:{‌{ form.memo }}</div>

        <div>Image:{‌{ form.image }}</div>

        <input type="hidden" name="author" value="{‌{ user.username }}">

        <input type="submit" value="Submit">

      </form>

{% else %}

```

```python:views.py

class UpdateMessage(UpdateView):

    template_name = 'update.html'

    model = BoardModel

    fields = ('title', 'message', 'image')

    success_url = reverse_lazy('list')

```

[先生]

既読機能で使っている
post2 = request.user.get_username()
を使い、ログインしているユーザー名の情報を取れば、その情報をもとに条件分岐することによってログインしている人だけが投稿可能になるという機能を実装できるようになるかと思います。
---------------------
6 Herokuを用いての公開

自分で一通り調べて実際に行ってみたところ、Buildには成功するようですが、実際の画面ではエラーが表示されており、ログを確認すると「at=error code=H10 desc="App crashed"」というエラーが出てしまっていました。

https://qiita.com/kents1002/items/e1b90c71897c55b8e870

データベースのsqlite3がHerokuに対応していないことが理由

飛んできたリクエストを受け取る、といったような設定をするファイルは、settingファイルなのでしょうか、それともurlsの方で何か設定するのでしょうか

not foundということは、Heroku自体は動いてそうですね。
そうなると、webserver→gunicorn（wsgi）→Django（urls.py）という流れになりますので、その流れのどこかで詰まっていることが原因かな、と思われます。
------------------------------------------
7 編集、アップデート

作成した「todoproject」をVultr側からgit cloneすることで一般公開出来るように進めていきましたが、アップデートしたい場合にはどのようにするのが良いのでしょうか？

VultrにSSH接続した後に、
①：vim操作で直接編集
②：git pullコマンド または git fetch + git mergeコマンドで変更分を取り込む

などが考えられますが、②の方法で問題ないのか、より効率的な方法があるのかご教示頂きたいです。個人開発レベル、GitHub上のmasterブランチを常に最新にしている前提でアドバイス頂ければ幸いです。


はい、②の方法で全く問題ないかと思います。
------------------------------------------